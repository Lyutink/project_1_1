{"version":3,"file":"static/js/945.2615ddc3.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","components/Form/Form.styled.jsx","components/Form/Form.jsx","pages/MoviesPage.jsx","services/moviesApi.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const LoaderContainer = styled.div`\n    display: flex;\n    justify-content: center;\n`","import React from 'react';\nimport { Oval } from \"react-loader-spinner\";\nimport { LoaderContainer } from \"./Loader.styled\";\n\nexport default function Loader() {\n    return (\n        <LoaderContainer>\n            <Oval color=\"#3f51b5\" height=\"100px\" width=\"100px\" />\n        </LoaderContainer>\n   )};","import { NavLink } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst ListLi = styled.li`\n    font-size: 24px;\n    font-weight: 500px;\n    :hover, :focus{\n        text-shadow: 0 0 10px rgb(63, 131, 209);\n    }\n`\nconst ListLink = styled(NavLink)`\n    text-decoration: none;\n    &.active{\n    color: #1e0ff0;}\n`\nexport { ListLi, ListLink };","import { ListLi, ListLink } from \"./MoviesList.styled\";\nimport { useLocation} from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n  \n\nexport default function MoviesList({ movies }) {\n   const location = useLocation();\n    return (  \n    <>\n      <ol>\n         {movies.map(({ id, title, name }) => (\n            <ListLi key={id} text={title ?? name}>\n               <ListLink to={`/movies/${id}`}\n                  state={{from: location}}>\n                  {title ?? name} \n               </ListLink>\n            </ListLi>\n            )\n         )}\n      </ol>\n   </>\n        )\n}\n\nMoviesList.propTypes = {\n   movies: PropTypes.arrayOf(\n      PropTypes.shape({\n         id: PropTypes.number.isRequired,\n         title: PropTypes.string,\n         name: PropTypes.string,\n      })\n   )\n}","import styled from \"styled-components\";\n\nexport const Form = styled.form`\n    display: flex;\n    justify-content: left;\n    align-items: center;\n`;\n\nexport const SerchFormBtn = styled.button`\n    padding: 6px 22px;\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 1.62;\n    text-align: center;\n    letter-spacing: 0.03em;\n    color: #ffffff;\n    background: #3f51b5;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:hover,\n    &:focus {\n        box-shadow: 0 0 10px rgb(63, 131, 209);;\n    };\n`;\n\nexport const SerchFormInput = styled.input`\n    display: inline-block;\n    width: 600px;\n    background: #ffffff;\n    font: inherit;\n    font-size: 18px;\n    border-radius: 4px;\n    outline: none;\n    padding: 6px 22px;\n    margin-right: 10px;\n    &::placeholder {\n        font: inherit;\n        font-size: 18px;\n    }\n\n    &:hover,\n    &:focus {\n        box-shadow: 0px 3px 1px rgba(0, 0, 0, 0.1), 0px 1px 2px rgba(0, 0, 0, 0.08),\n        0px 2px 2px rgba(0, 0, 0, 0.12);\n    }\n`;","import PropTypes from \"prop-types\";\nimport { Form, SerchFormInput, SerchFormBtn } from \"./Form.styled\";\n\nexport function SearchForm({ handleSubmit }) {\n    return(\n    <Form onSubmit={handleSubmit} autoComplete=\"off\">\n            <SerchFormInput type=\"text\" name=\"query\" autoFocus placeholder=\"Search movie\" />\n            <SerchFormBtn type=\"submit\">Search</SerchFormBtn>\n    </Form>\n    )    \n}\n\nSearchForm.propTypes = {\n    handleSubmit: PropTypes.func.isRequired,\n}\n","import { useEffect, useState } from \"react\"\nimport { useSearchParams } from \"react-router-dom\";\nimport Notiflix from \"notiflix\";\n\nimport Loader from \"components/Loader/Loader\";\nimport { SearchForm } from \"components/Form/Form\";\n\nimport { getSerchMovies } from \"../services/moviesApi\";\nimport MoviesList from \"components/MoviesList/MoviesList\";\n\n\nexport function MoviesPage() {\n   const [searchParams, setSearchParams] = useSearchParams();\n   const [loading, setLoading] = useState(false);\n   const [resultsMovies, setResultMovies] = useState([]);\n\n   const currentQuery = searchParams.get('query');\n   \n   useEffect(() => {\n      if (currentQuery) {\n         async function fetchSerchMovies() {\n            setLoading(true);\n            try {\n               const movies = await getSerchMovies(currentQuery);\n               if (movies.results.length === 0) {\n                  Notiflix.Notify.info('Sorry, there is no movie for this request. please enter a new request');\n                  return;\n               }\n               setResultMovies(movies.results);\n            } catch (error) {\n               console.log(error);\n            } finally {\n               setLoading(false)\n            }\n         }\n         fetchSerchMovies();\n      }\n   },[currentQuery])\n   \n   \n   function handleSubmit(event) {\n      event.preventDefault();\n      const queryString = event.currentTarget.elements.query.value;\n      if (queryString === \"\") {\n      Notiflix.Notify.info('Please, enter a request!');\n      return;\n      }\n         setSearchParams({query: queryString.trim().toLowerCase()})\n   }\n\n   return (\n      <main>\n         <SearchForm handleSubmit={handleSubmit} autoComplete=\"off\"/>\n         {loading && <Loader/>}\n         {resultsMovies && <MoviesList movies={resultsMovies} />}\n      </main>)\n}","import axios from \"axios\"\nimport Notiflix from \"notiflix\";\nNotiflix.Notify.init({\n  width: \"280\",\n  position: \"center-top\",\n  distance: \"180px\",\n  opacity: 1,\n  timeout: 3000,\n  showOnlyTheLastOne: true,\n  clickToClose: true,\n  useIcon: false,\n});\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_Key = \"e5081468dae293b7907b87f3cbb5b6c8\";\n\nexport async function getPopularFilms() {\n    try {\n        const response = await axios.get(`trending/all/day?api_key=${API_Key}`);\n        return response.data.results;\n    }\n    catch (error) {\n        Notiflix.Notify.init(\"Critical error\", error);\n        //failure\n    }\n}\n\nexport async function getMovieDetails(movieId) {\n    try {\n        const response = await axios.get(`movie/${movieId}?api_key=${API_Key}&language=en-US`);\n        return response.data;\n    }\n    catch (error) {\n        Notiflix.Notify.init(\"Critical error\", error);\n        //failure\n    }\n}\n\n\nexport async function getMovieCast(movieId) {\n    try {\n        const response = await axios.get(`movie/${movieId}/credits?api_key=${API_Key}&language=en-US`);\n        return response.data;\n    }\n    catch (error) {\n        Notiflix.Notify.init(\"Critical error\", error);\n        //failure\n    }\n}\n\nexport async function getReviews(movieId) {\n    try {\n        const response = await axios.get(`movie/${movieId}/reviews?api_key=${API_Key}&language=en-US`);\n        return response.data;\n    }\n    catch (error) {\n        Notiflix.Notify.init(\"Critical error\", error);\n        //failure\n    }\n}\n\nexport async function getSerchMovies(searchMovies) {\n    try {\n        const response = await axios.get(`search/movie?api_key=${API_Key}&language=en-US&query=${searchMovies}`);\n        return response.data;\n    }\n    catch (error) {\n        Notiflix.Notify.init(\"Critical error\", error);\n        //failure\n    }\n}\n"],"names":["LoaderContainer","styled","Loader","color","height","width","ListLi","ListLink","NavLink","MoviesList","movies","location","useLocation","map","id","title","name","text","to","state","from","Form","SerchFormBtn","SerchFormInput","SearchForm","handleSubmit","onSubmit","autoComplete","type","autoFocus","placeholder","MoviesPage","useSearchParams","searchParams","setSearchParams","useState","loading","setLoading","resultsMovies","setResultMovies","currentQuery","get","useEffect","fetchSerchMovies","getSerchMovies","results","length","Notiflix","console","log","event","preventDefault","queryString","currentTarget","elements","query","value","trim","toLowerCase","position","distance","opacity","timeout","showOnlyTheLastOne","clickToClose","useIcon","axios","API_Key","getPopularFilms","response","data","getMovieDetails","movieId","getMovieCast","getReviews","searchMovies"],"sourceRoot":""}